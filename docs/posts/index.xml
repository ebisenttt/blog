<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ebisen blog</title>
    <link>https://ebisenttt.github.io/blog/posts/</link>
    <description>Recent content in Posts on ebisen blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 31 Jan 2023 08:04:59 +0900</lastBuildDate><atom:link href="https://ebisenttt.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UoPeopleの入学手続き</title>
      <link>https://ebisenttt.github.io/blog/posts/uopeople_application/</link>
      <pubDate>Tue, 31 Jan 2023 08:04:59 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/uopeople_application/</guid>
      <description>UoPeopleのBachelor of CS degree programにApplyしたのでその記録を残しておく。
手続き中によくわからなかったこと 次のことがよくわからないまま手続きを進めていた。あらかじめ知っておけば安心して手続きできたので，同じような状況にある人は参考にしてほしい。
最初の２科目は自動で登録される 一番最初に登録される2科目は自動で登録される。自分の場合はDuollingo English Testの点数で英語の授業が免除されたので，UNIV1001とCS1101だった。色々履修の順番とか考えてはいたけど最初は選ばせてくれない。
最初の２科目の単位が認められるまでは &amp;ldquo;a non degree seeking student&amp;rdquo; 入学手続きが一通り終わってポータルに&amp;quot;Courses taken as a non-degree seeking student&amp;quot;と表示された。「え，Bachelor degreeとりたいんだけど&amp;hellip;。」と思っていたが，最初の2科目を終えると&amp;quot;a dgree seeking student&amp;quot;となるようだ。
学生用メールアドレスは &amp;ldquo;a degree seeking student&amp;rdquo; となってから発行される オンラインで学習するにあたって，いろいろ便利なツールがあるのでサブスクしようと思ったが，学生割引を受けるために必要な学生用メールアドレスが発行されるのは &amp;ldquo;a degree seeking student&amp;rdquo; になってからなので，少なくとも最初のTerm（9週間）は学生用メールアドレスがないまま授業を受けることになる。
どの単位がどの授業の単位に移行されるのか?またそれはいつわかるのか? SophiaやCouseraの単位移行については情報が多いが，当然通常の大学のどの授業がUoPeopleのどの授業の単位に移行されるのかは情報がない。こればかりは，事務局次第としかいいようがない。「どの単位が移行を認められたか」については，書類を出して数日後にポータル上でわかる。「どの授業の単位に充当されたのか」については，&amp;ldquo;a degree seeking student&amp;rdquo; になってからわかるようだ。つまり，履修の計画をしたり，SophiaやCouseraを使って外部で先に単位を取ってしまうみたいなことは，&amp;ldquo;a degree seeking student&amp;rdquo; になってから行うことになる。
(2023/3/20訂正・追記)
UoPeopleにも通常の大学と同じように，必修，選択必修，選択というような括りで授業が存在するため，どの授業を取るべきか計画を立てることは重要です。しかしながら，私が以前に卒業した大学のどの授業の単位がUoPeopleのどのCourseのCreditとしてTransferされたのかはわからない状況が続いていました。具体的には，移行先のCourseが「N/A」となっていました。
Advisorに「どの授業の単位として移行されたか」についてわからず，次のtermに取る授業が決められずに困っているという旨の連絡をしたら，「いやーそうだよね！ちょっと聞いてみるから3 Bussiness Day待って！」って返信が来ました。で，3日待つとメールが来て，どの領域の単位として移行されたがわかるようなWordファイルが添付されてました。これはもっと早くやっておくべきだったと反省しました。
これについては同じような状況の生徒さんはたくさんいるんじゃないかと想像するので，もうちょっと親切なシステムになってほしいなぁと思っているところです。
単位移行の上限は90単位とあるが&amp;hellip; 日本の大学で学士と修士を取得したので，移行できそうな単位はかなりある（90単位は優に超える）のだが，申請して認められたのは55単位だった。おそらくElectivesと一部のGeneral Educationの単位に移行されるのだろう。当然CSの授業は大学で受けていないのでここの部分は移行で賄えないということだと思う。どの授業に移行されるのかわかるのはまだ先なので，そのときにまた記録するつもり。
(2023/3/20追記)
上の通りどの単位が移行されたのか，Advisorに問い合わせたらわかりました。
General Education Math 3単位 数学系の学科だったので当然。ただし，Statisticsは移行されず。これは学部時代の大学の統計系の授業名の英名がよくなかった。&amp;ldquo;Statistics&amp;quot;を冠する授業は2単位のみ（UoPeopleは1Courseあたり3Credits）で，他の統計系の授業は別の表現が使われている。Sophiaで単位移行しようとしています。 Humanities 6単位 一般教養でこの辺の単位も取っていたので移行されました。 Natural Sciences and Technology 3単位 同上 Dicipline Area ELectives 3単位 同上 Electives 33単位分全て単位移行で賄えました！これはデカい。一度大学を卒業している人はほとんどこうなると思います。</description>
    </item>
    
    <item>
      <title>Hugoの環境移行でつまづいた</title>
      <link>https://ebisenttt.github.io/blog/posts/20230108_hugo_trans/</link>
      <pubDate>Sun, 08 Jan 2023 13:40:16 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/20230108_hugo_trans/</guid>
      <description>起きた問題 hugo serverをたたいてアクセスするも&amp;quot;Page not found&amp;quot;と表示される hugo new posts/hoge.mdをたたいても&amp;quot;Error: no existing content directory configred for this project&amp;quot;と表示され.mdファイルが作成されない 対処法 git submodule --init --recursiveを実行 config.tomlの以下の項目を設定 archetypesDir = &amp;#34;archetypes&amp;#34; publishDir = &amp;#34;public&amp;#34; contentDir = &amp;#34;content&amp;#34; ディレクトリarchetypesを作成 ディレクトリarchetypes内に下記のファイルdefault.mdを作成 --- title: &amp;#34;{{ replace .Name &amp;#34;-&amp;#34; &amp;#34; &amp;#34; | title }}&amp;#34; date: {{ .Date }} draft: true --- ディレクトリcontentを作成（またはディレクトリ名変更） ディレクトリpublicを作成（またはディレクトリ名変更） 補足 最後に更新してからアップデートが入っていたことと，MacBookAir2017からM2MacBookAirに変えて色々と環境が変わったことが原因かと予想していますが，本質的なことは調べてません。逆に以前の環境ではデフォルトのディレクトリ構成ではないのにconfig.tomlがちゃんと設定されていなくても動いていたのが謎。
おまけ HugoがLive Reloadに対応していたことを知って快適になった。
参考サイト Hugo ビルドエラー対応 found no layout file - infraya.work</description>
    </item>
    
    <item>
      <title>TwitterAPI で新しいブログの記事を自動で投稿したい</title>
      <link>https://ebisenttt.github.io/blog/posts/20220808_tweetnewarticle/</link>
      <pubDate>Mon, 08 Aug 2022 17:11:26 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/20220808_tweetnewarticle/</guid>
      <description>ほとんど見られることがないブログとは知りつつも，更新したことすら知られることがないのは虚しいので，Twitter で更新したことを投稿するくらいは許されるだろうと思いました。ただ，毎回ツイートするのは面倒なので自動化したい。でもどうやるの？ということでこの記事に作業の記録を残します。
TwitterAPI の申請 このサイトで誘導されるがままに申請したら5分くらいで手続きが終わりました。
Twitter API
TwitterAPI の設定 設定に少し手間取ったので，注意事項を残しておきます。
v1.1 ではなく v2 を使うこと v1.1 は Elavated access を有効にしないと使えません。v2 では Essential access を使えます（デフォルトで有効）。手間が多少増えるので，v2 を使っておくのが無難でしょう。
公式のドキュメントを読むこと v1.1 と v2 では使用が大きく異なります。ググって出てきた技術系のブログを参考にして OAuth の設定をすると，バージョンが違ってエラー吐かれまくります。改めてどんなサービスでも公式の docs を読んだ方がいいということを実感しました。
Authentication の設定(任意) デフォルトではGETメソッドしか許可されていません。Dash BoardでUser authentication settingsを変更することでPOSTメソッドが許可されます。
HUGO の仕様 自分の場合は，次のような順序で記事を作成します:
hugo new article/[name].mdで記事のテンプレートcontent/article/[name].mdを作成 content/article/name.mdにマークダウンで記事を書く hugoで記事をコンパイルしdocs/article/[name]/index.htmlを作成 リモートリポジトリにpush なお，3 と 4 についてはシェルスクリプトで既に自動化しています。
OGP の設定 OGP とは，Open Graph Protcol の略で，SNS 上でリンクが共有されたときに表示されるカードの設定として使われるプロトコルです。このサイトで使用しているテーマでは，次のような設定でした。
&amp;lt;meta property=&amp;#34;og:title&amp;#34; content=&amp;#34;{{ .Scratch.Get &amp;#34;title&amp;#34; }}&amp;#34;&amp;gt; &amp;lt;meta property=&amp;#34;og:description&amp;#34; content=&amp;#34;{{ .Scratch.Get &amp;#34;description&amp;#34; }}&amp;#34;&amp;gt; &amp;lt;meta property=&amp;#34;og:image&amp;#34; content=&amp;#34;{{ .</description>
    </item>
    
    <item>
      <title>Recursionの有料会員になってみた</title>
      <link>https://ebisenttt.github.io/blog/posts/220804_recursion_1/</link>
      <pubDate>Thu, 04 Aug 2022 16:20:47 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/220804_recursion_1/</guid>
      <description>Recursion の有料会員になってみたので，継続的に感想を書いていこうと思います
Recursion とは Facebook のエンジニアの方が運営している CS（Computer Science）を学習するためのサイトです。
Recursion
Recursion を始めようと思った理由 おすすめしているサイトが多い プログラミングの学習に関するサイトや Twitter なんかで最近よく目にするため，ずっと気になってはいました。
利用者同士でのチーム開発 一番気になったのは利用者同士でのチーム開発を行えるということです。私の周りに「一緒に Web アプリ作ろう！」なんて言える人はいないし，職場でも多少はコードを書きますが，チームでの開発をしたことがありません（そもそも書ける人が自分以外に 1 人しかいない）。そのため，とりあえず動くアプリは作れても，可読性を意識した綺麗なコードを書くといったことは苦手です。実際に，数ヶ月前に書いたものを見返すと「なんでこんな書き方してんの？」となることもしばしば。人に見られることを前提にするという環境を体験することでこの辺を解決するきっかけにしたいと考えました。エンジニアの方にコードレビューしてもらえるということは私にとって大きい魅力でした。
とりあえず数時間触ってみた感想 触ってみた感じ，Progate よりも難しく，CS50 よりも簡単って感じです。
Progate
CS50
Progate は「とりあえず書けるようなになろう」というコンセプトだと感じ，CS50 は「基礎的なバックグラウンドをおさえた上でコーディングできるようになろう」というコンセプトであるように感じました。CS50 も Recursion も ComputerScience の看板を掲げているだけあって， C 言語でメモリの話になり，その後 python でアルゴリズムの話になってという流れで進んでいきます。Recursion の方が日本語で学習できること，コードが正しいか否かというフィードバックが速く細かいこと（CS50 は大学の講義ということもあり，90 分程度の講義の後に課題がでるという形式です）から，日本人の初学者にとっては学習しやすいかなーと思います。一方で，CS50 は修了証明書の発行を除けば無料ですが，Rucursion は有料（月あたり 61 米ドル）なので，費用面では CS50 が優れているかもしれません。ただし，CS50 で学習できないことが Recursion では学習できたりします。例えばフレームワークの使い方とか。
今後の見通し 引き続きポートフォリオ制作を進めながら，Recursion でのチーム開発に必要な最低条件を優先的に満たしていこうと思います。進捗はまたこのブログに書きます。</description>
    </item>
    
    <item>
      <title>2章 | 初学者によるRuby on Rails Tutorial学習記録</title>
      <link>https://ebisenttt.github.io/blog/posts/ruby_on_rails_tutorial_2/</link>
      <pubDate>Sat, 06 Mar 2021 14:29:08 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/ruby_on_rails_tutorial_2/</guid>
      <description>この記事では，プログラミング初学者によるRuby on Rails Tutorial学習中のつまずきを章別に共有します。一覧は次のページに用意しています。 はじめに | 初学者によるRuby on Rails Tutorial学習記録
2章の所感 2章では，データベースやherokuを使います。この辺の連携や認証でかなりつまずいてしまいました…。
データベースをmysqlへ Ruby on Rails Tutorialでは，データベースにPostgreSQLを使っていますが，複数の記事でMySQLが推奨されていることや，職場でもMySQLが使用されていることから，MySQLを使用することにしました。
Gemfile 削除するgem sqlite3 pg 追加するgem mysql2 Gemfileを編集したら bundle install bundle update します。
mysqlでデータベースを作成 mysql -u root -p //まずはroot権限でログイン パスワードを要求されるので，何も入力せずにEnter。初期設定ではパスワードが設定されていません。
create database toy_app; データベースのテーブルやらなんやらは教材の指示に従えばOKです。
config/database.ymlの設定 この辺から私にはややこしかったです。config/database.ymlを書き換えます。ここには，データベースに関する設定が書かれています。どこまで信用できるかはわかりませんが，私の設定を書いてみます。
default: &amp;amp;default adapter: mysql2 encoding: utf8 reconnect: false pool: 5 timeout: 5000 development: &amp;lt;&amp;lt;: *default database: toy_app //さっき設定したdatabase名 user: root password: test: //まだtestは使わないのでとりあえずこの状態で &amp;lt;&amp;lt;: *default production: &amp;lt;&amp;lt;: *default url: &amp;lt;%= ENV[&amp;#39;DATABASE_URL&amp;#39;] %&amp;gt; //これ以降になにが書いてるかは後でわかります database: &amp;lt;%= ENV[&amp;#39;DB_NAME&amp;#39;] %&amp;gt; user: &amp;lt;%= ENV[&amp;#39;DB_USER&amp;#39;] %&amp;gt; password: &amp;lt;%= ENV[&amp;#39;DB_PASSWORD&amp;#39;] %&amp;gt; default, development, test, productionの4つに別れていて，開発中に使う設定はdevelopmentに，herokuにアップロードした後の本番環境で使う設定はproductionに書いてあります。testはこの時点ではあまり気にする必要がありません。defaultは全てに共通して設定したい項目です。</description>
    </item>
    
    <item>
      <title>1章 | 初学者によるRuby on Rails Tutorial学習記録</title>
      <link>https://ebisenttt.github.io/blog/posts/ruby_on_rails_tutorial_1/</link>
      <pubDate>Wed, 03 Mar 2021 18:00:57 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/ruby_on_rails_tutorial_1/</guid>
      <description>この記事では，プログラミング初学者によるRuby on Rails Tutorial学習中のつまずきを章別に共有します。一覧は次のページに用意しています。 はじめに | 初学者によるRuby on Rails Tutorial学習記録
1章の所感 1章については，まだつまずくことが少なかったです。Gemfileがまだブラックボックス化しているため，学習中に私が気になった点を一部補足しておきます。
Gemfile バージョン指定 Gemfileは使用するgemの種類やバージョンを使用するために作成するファイルです。その中で使用する&amp;gt;=や~&amp;gt;という記号について補足します。
バージョンの表記方法について まず，RubyやRailsに限らず，ソフトウェアのバージョンは
(メジャーバージョン).（マイナーバージョン）.（パッチバージョン） の形式で表記します。例えば，1.2.3というバージョンは，メジャーバージョンが1, マイナーバージョンが2, パッチバージョンが3であるバージョンを表します。 なお，メジャーバージョンは大きなアップデート，マイナーバージョンは小さなアップデート，パッチバージョンはバグの修正等があったときに更新されます。
&amp;gt;= 例えば
gem &amp;#39;sample&amp;#39;, &amp;#39;&amp;gt;= 1.2.3&amp;#39; はsampleというgemの1.2.3以上のバージョンを指定しています。つまり，存在するバージョンのうち1.2.3以降の最も新しいバージョン（例えば1.2.4や1.3.0など）が使用されます。
~&amp;gt; 例えば
gem &amp;#39;sample&amp;#39;, &amp;#39;~&amp;gt; 1.2.3&amp;#39; はsampleというgemのメジャーバージョンが1でマイナーバージョンが2以上のバージョン（例えば1.3.2など）を指定します。逆に言えば，メジャーバージョンが新しいもの（例えば2.1.3など）は使用されません。
bundle まずbundleとは，gemの依存関係（例えばgemAを使うにはgemBが必要というような関係）を管理するためのものです。ややこしいのはbundle自身もgemであるということです。様々なgemを使うにあたり，bundleがない状態では他のgemを管理できないため，まずは
gem install bundle でbundleをインストールします。その後，bundle以外の使いたいgemをGemfileに記述し，
bundle install でインストールします。
GemfileとGemfile.lock 作成したアプリケーションのディレクトリ直下にGemfileとGemfile.lockというファイルがあるはずです。これらの役割について補足します。まず，Gemfileは（前述の通り），作成するアプリケーションに使用したいgemの種類とバージョンを人間が記述するためのファイルです。一方でGemfile.lockは，作成するアプリケーションに使用したいgemの種類とバージョン，その依存関係をbundleがメモしておくためのファイルです。したがって，基本的には人間がGemfileを編集することはあっても，Gemfile.lockを編集することはありません。Gemfile.lockを更新する際は，
bundle update とします。 これまでの内容をまとめると，まず
gem install bundle \\bundleがインストールされる 次にGemfileを編集し，
bundle install \\Gemfileの内容に応じてgemがインストールされる bundle update \\Gemfileの内容に応じてGemfile.lockが更新される という流れです。</description>
    </item>
    
    <item>
      <title>はじめに | 初学者によるRuby on Rails Tutorial学習記録</title>
      <link>https://ebisenttt.github.io/blog/posts/ruby_on_rails_tutorial_0/</link>
      <pubDate>Wed, 03 Mar 2021 17:01:50 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/ruby_on_rails_tutorial_0/</guid>
      <description>この記事の目的 この記事の目的は，「プログラミング初学者がRuby on Rails Tutorialで学習した際につまづいた点を記録し，共有すること」です。 Ruby on Rails Tutorialは日本語でとても丁寧に書かれた教材で，高く評価されています。しかしながら，初学者にとってはつまずくポイントがたくさんあります（つまずきながら学習して「熟練」を目指すことを想定されている教材であることは承知しています）。 特に，教材が作成されたあとにアップデートが入ったソフトウェアやGemのバージョン違いによるエラー，警告が大量に出ることがあります。私はそのエラー，警告を解消するために多くの時間を必要としました。 StackoverflowやGiuhubのissue，Qiitaなどで共有された情報を見ながら，初学者なりになんとか学習を続けられています。同じような状況にある方に少しでも貢献できたら幸いです。
学習環境 教材 Ruby on Rails on Tutorial 第6版
使用ハード Mac Book (Ratina, 12-inch, 2017)
使用ソフト Ruby 2.7.2 Rails 6.1.3 terminal vim 各章でのつまずき 学習済み 1章 2章 3章（執筆中） これから学習予定 4章 5章 6章 7章 8章 9章 10章 11章 12章 13章 14章 </description>
    </item>
    
    <item>
      <title>200912の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200912/</link>
      <pubDate>Sun, 13 Sep 2020 14:00:42 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200912/</guid>
      <description>この日はAtCoderよりもブログの方に時間を使いました。
AtCoder過去問演習 D - Islands War 区間計画法を知りませんでした。この発想は自分にはないです。解説AC。
ブログ SEO対策 まずGoogle Analyticsに登録しました。参考にしたのは次のサイトです。 HUGOで行うGoogleアナリティクスの導入から設定方法の紹介
このサイトはHugoで作っているのでconfig.tomlを書き換えるだけで簡単でした。
次にGoogle Search Consoleに登録しました。こちらは特に調べずとも，このサイトのホームページのURLを登録し，HTMLファイルをブログのルートディレクトリに置くだけでできました。
まだまだアクセスはありませんが，引き続き更新していきます。</description>
    </item>
    
    <item>
      <title>200911の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200911/</link>
      <pubDate>Sat, 12 Sep 2020 16:03:35 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200911/</guid>
      <description>この日はいつもより時間を作れました。
AtCoder過去問 B - String Rotation queueを使ってfrontをpopしたりpushしたりして解きました。自力AC。
B - Contest with Drinks Easy 全ての時間を足して，それぞれの時間を置き換えて出力を繰り返しました。自力AC。
A - 閉路グラフ n個のノードの場合は1個飛ばしに消せば最大n/2のグラフに分けられます。サンプルケースが親切なのでn/2に気付けました。自力AC。
B - ボウリングゲーム 空白なのか改行なのか，空白ならばいくつ出力するかというところを綺麗に書けず，結果coutを書きまくって対応しました。自力AC。
A - たこ焼き買えるかな？ 端数が7個以上なら10個セットを買った方が安い。自力AC。</description>
    </item>
    
    <item>
      <title>200909の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200909/</link>
      <pubDate>Sat, 12 Sep 2020 16:03:07 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200909/</guid>
      <description>AtCoder過去問演習 A - Wanna go back home 場合分けが多かったので，できるだけシンプルに書きたいと思いましたが結局4つの場合に分けました。もっといい方法があるのか…。自力AC。</description>
    </item>
    
    <item>
      <title>200908の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200908/</link>
      <pubDate>Sat, 12 Sep 2020 16:02:26 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200908/</guid>
      <description>AtCoder過去問演習 B - AtCoDeerくんとボール色塗り Kをかけまくる問題。long longを使ったという点くらいです。自力AC。</description>
    </item>
    
    <item>
      <title>200907の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200907/</link>
      <pubDate>Sat, 12 Sep 2020 16:01:17 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200907/</guid>
      <description>AtCoder過去問演習 ###　D - カード並べ
next_permutationを使いました。自力AC。
###　A - おつり
10円忘れてました笑。自力AC。
phpとsql 業務で簡単な作業を頼まれたので初歩的なことから調べながらいじっていました。内容はエラーログを見て細かい修正をするだけです。Warningが出ているのでプログラムは動いてしまっていますが，時間がある時に修正して欲しいとのこと。 </description>
    </item>
    
    <item>
      <title>200906の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200906/</link>
      <pubDate>Sat, 12 Sep 2020 16:00:31 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200906/</guid>
      <description>AtCoder過去問演習 A - Darker and Darker 初期の黒マスを始点としてマンハッタン距離の最大値を出力する，回数を距離に置き換えるという発想がなかったです。解説AC。
C - 器物損壊！高橋君 前問のおかげで塀を壊すことをコスト1の移動に置き換えるという発想ができました。自力AC。
C - One-stroke Path next_permutationの問題は何度か解いたことがありました。自力AC。
VSCode環境整備 デバッグビュー F5でデバッグを始めると，以前はデバッグビューが自動で表示されましたが，最近は自動で表示されなくなっていました。
Twitterで呟くとフォロワーさんから7月のVSCodeのアップデートが原因ではないかと助言を頂きました。
公式ドキュメントを確認すると，最初のセッションが開始したときのみデバッグビューを表示するようにデフォルト設定が変更されたようでした。
setting.jsonのdebug.openDebugを次のように修正したら元に戻りました。
&amp;#34;debug.openDebug&amp;#34; : &amp;#34;openOnSessionStart&amp;#34; queueのデバッグ デバッグ時にC++のコンテナクラス(vector, list, queueなど)の要素を表示させるためにVSCodeの拡張機能Code-lldbを使っています。(&amp;lt;bits/stdc++.h&amp;gt;を使えなくなる代償を払い，コンパイラーをgccからclangに，デバッガーをgdbからlldbに変えてます…。いい方法があれば教えて下さい！！)
しかし，最近BFSやDFSを実装できるようになり，queueの要素が表示されないことに気づきました。
またsetting.jsonを見直してみると</description>
    </item>
    
    <item>
      <title>200902</title>
      <link>https://ebisenttt.github.io/blog/posts/200902/</link>
      <pubDate>Fri, 04 Sep 2020 06:05:50 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200902/</guid>
      <description>GoogleCalssroomの提出物を一括ダウンロードするプログラム作成 この日もGoogleAPIをいじってました。OAuthについてあまり知らなかったので認証周りで時間がかかってしまっています。
まだ完成しておらず時間があるので手作業でやってしまおうかという話になりました。
そもそもOAuthがなにをしているのかということに関しては下記のサイトをみました。
一番分かりやすい OAuth の説明
業務には実用しないかもしれませんが，せっかく書いたので完成させようとは思います。プログラムの詳細については個別の記事を書こうと思います。</description>
    </item>
    
    <item>
      <title>200901の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200901/</link>
      <pubDate>Fri, 04 Sep 2020 06:05:45 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200901/</guid>
      <description>Google Classroomへの自動投稿アプリ作成 今日はAtCoderの過去問演習ではなく，GAS(Google Apps Script)でGoogle APIを使ったアプリを作っていました。言語はJavaScriptです。あまりJavaScriptに触ったことはありませんでしたが，コールバック関数について少し勉強したくらいで，ほとんどC++で書いている時と考え方は変わりませんでした。
ただ多くの変数や関数を管理するのは慣れない作業で手間取りました。
このプログラムは毎日決まった時間にGoogleForm未提出者名を GoogleClassroomのストリームに投稿するものです。
詳細については後日に単独の記事を作ろうと思います。
&amp;lt;追記&amp;gt; 無事動きました！未提出者も0になりました。</description>
    </item>
    
    <item>
      <title>200831の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200831/</link>
      <pubDate>Fri, 04 Sep 2020 06:05:31 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200831/</guid>
      <description>この日もあまり量は多くないですね。平日の習慣を見直そうと思います。
C - 100 to 105 C - Poll mapを使いました。各要素の個数を値として記録しましたが，値が最大の要素を出力する方法に悩みました。最終的には，最大値を記録しておいて，値が最大値に一致する要素を出力するループを回しました。もっといい方法ないのかな…。
&amp;lt;追記&amp;gt;
公式解説を見たところ，自分の解答とおおよそ同じでした。これが一般的な方法ということですかね。</description>
    </item>
    
    <item>
      <title>200830の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200830/</link>
      <pubDate>Tue, 01 Sep 2020 04:35:21 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200830/</guid>
      <description>この日は1日休みだったのでAtCoderだけでなくブログの環境整備もしてみました。
AtCoder過去問演習 まとまった時間が取れたので学習計画#1に基づいてアルゴリズム別に演習をしました。
C - たくさんの数式 bit全探索の問題。なかなか慣れないので時間がかかりました。なんとか自力AC。
C - All Green どこにbit全探索を使えばいいのか分からず解説AC。
A - 高橋君とお肉 これは図を付けてくれていたので解きやすかったです。自力AC。
D - 派閥 ここからはDFSの問題です。DFSは理屈はわかるけど実装するのが苦手です。なんとか自力ACできました。
A - 深さ優先探索 比較的易しい問題でした。周りに1マス余白を作ってコンパイルエラーしないようにしました。自力ACです。
B - 埋め立て これも上の問題と同じような感じでした。ただ埋め立てる場所を選ぶ部分も書くのに少し時間がかかりました。自力ACです。
以上がAtCoderの過去問演習です。bit全探索やDFSなど苦手意識があったものも自力ACできたので少し成長？
ブログの環境整備 Hugoで作ったブログ記事をGithubにdeployする Hugoで作った記事をGitHubにプッシュするまでの作業をひとまとめにできるdeploy.shを作りました。</description>
    </item>
    
    <item>
      <title>200829の学習</title>
      <link>https://ebisenttt.github.io/blog/posts/200829/</link>
      <pubDate>Sun, 30 Aug 2020 17:47:26 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/200829/</guid>
      <description>この日は午前中は仕事だったので，夕方くらいから作業開始でした。週末なので，アルゴリズム別にAtCoderの過去問演習をしました。夜は外出したので量は多くないです。
A - 2点間距離の最大値 ( The longest distance ) 灰diffなのでなんなくAC
B - Sum of Three Integers TLEを避けるために3重ループでなく，2重ループにしました。この工夫は以前もやったことがあったので大丈夫。数学でもこの手法で2元1次連立方程式に持ち込んだりしますね。
C - Otoshidama この問題は以前も解いたことがありました。これも1つ前の問題と同じような工夫で解けました。
A - Don&amp;rsquo;t be late 整数の割り算が切り捨てになることに注意しました。</description>
    </item>
    
    <item>
      <title>Hugoで作ったブログ記事をGithubにdeployする</title>
      <link>https://ebisenttt.github.io/blog/posts/hugo-tips/</link>
      <pubDate>Sun, 30 Aug 2020 17:01:12 +0900</pubDate>
      
      <guid>https://ebisenttt.github.io/blog/posts/hugo-tips/</guid>
      <description>はじめに このブログの記事作成の際は，Hugoで書いた記事をGithubPagesにデプロイしています。書いてからデプロイする作業が多少面倒だったので，これを簡単にする手順をまとめてみます。
これまでの手順 hugoで記事作成ができたら，下の手順を踏んでいました。
hugo で.mdファイルから.htmlファイルを生成し，
git add . で記事の&amp;rsquo;.md&amp;rsquo;ファイルをインデックスに追加し，
git commit -m &amp;#34;メモ&amp;#34; でインデックスのファイルをローカルリポジトリにコミットし，
git push origin master でローカルリポジトリをリモートリポジトリのmasterブランチにpush する。
こんな感じです。毎回タイプするのが以外と面倒。最初のhugoを忘れてしまうことがあります。また，ちょっとした修正をしたいだけのときは特に面倒です。
簡単にした手順 deploy.shというファイルを作業ディレクトリ直下に作っておいて，上の4つの手順をこのファイルに予め書いておきます。ファイルの中身は下の通りです。
今回は，hugoで生成されたhtmlファイルのみをpushしたいので，cd docsとしています。
#!/bin/bash1 echo -e &amp;#34;\033[0;32mDeploying updates to GitHub...\033[0m&amp;#34; # Build the project. hugo # if using a theme, replace with `hugo -t &amp;lt;YOURTHEME&amp;gt;` # Go To Public folder cd docs # Add changes to git. git add . # Commit changes. msg=&amp;#34;rebuilding site `date`&amp;#34; if [ $# -eq 1 ] then msg=&amp;#34;$1&amp;#34; fi git commit -m &amp;#34;$msg&amp;#34; # Push source and build repos.</description>
    </item>
    
  </channel>
</rss>
